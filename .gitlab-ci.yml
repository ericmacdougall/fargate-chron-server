deploy_production:
  type: deploy
  environment:
    name: production
    url: example.com
  before_script:
    - apt-get update -qq
    - apt-get install -qq git
  # Setup SSH deploy keys
    - 'which ssh-agent || ( apt-get install -qq openssh-client )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$PROD_SSH")
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - ssh ec2-user@$PROD_IP "cd /home/ec2-user/fargate-chron-server && sudo git checkout production && sudo git pull && sudo rm keys.json && sudo cp keys-prod.json keys.json && $ECR_LOGIN && docker system prune -f && docker build -t fargate-chron-server-prod . && docker tag fargate-chron-server-prod:latest {prod-account}.dkr.ecr.ca-central-1.amazonaws.com/fargate-chron-server-prod:latest && docker push {prod-account}.dkr.ecr.ca-central-1.amazonaws.com/fargate-chron-server-prod:latest && exit"
  only:
    - production
    
deploy_development:
  type: deploy
  environment:
    name: development
    url: example.com
  before_script:
    - apt-get update -qq
    - apt-get install -qq git
  # Setup SSH deploy keys
    - 'which ssh-agent || ( apt-get install -qq openssh-client )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$DEV_SSH")
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - ssh ec2-user@$DEV_IP "cd /home/ec2-user/fargate-chron-server && sudo git checkout development && sudo git pull && sudo rm keys.json && sudo cp keys-dev.json keys.json && $ECR_LOGIN && docker system prune -f && docker build -t fargate-chron-server-dev . && docker tag fargate-chron-server-dev:latest {dev-account}.dkr.ecr.ca-central-1.amazonaws.com/fargate-chron-server-dev && docker push {dev-account}.dkr.ecr.ca-central-1.amazonaws.com/fargate-chron-server-dev:latest && exit"
  only:
    - development
